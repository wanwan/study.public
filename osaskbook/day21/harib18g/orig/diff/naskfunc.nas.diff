120a121,124
> 		MOV		AX,SS
> 		CMP		AX,1*8
> 		JNE		.from_app
> ;	OSが動いているときに割り込まれたのでほぼ今までどおり
122c126,127
< 		PUSH	EAX
---
> 		PUSH	SS				; 割り込まれたときのSSを保存
> 		PUSH	EAX				; 割り込まれたときのESPを保存
126a132,149
> 		ADD		ESP,8
> 		POPAD
> 		POP		DS
> 		POP		ES
> 		IRETD
> .from_app:
> ;	アプリが動いているときに割り込まれた
> 		MOV		EAX,1*8
> 		MOV		DS,AX			; とりあえずDSだけOS用にする
> 		MOV		ECX,[0xfe4]		; OSのESP
> 		ADD		ECX,-8
> 		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
> 		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
> 		MOV		SS,AX
> 		MOV		ES,AX
> 		MOV		ESP,ECX
> 		CALL	_inthandler20
> 		POP		ECX
127a151,152
> 		MOV		SS,AX			; SSをアプリ用に戻す
> 		MOV		ESP,ECX			; ESPもアプリ用に戻す
136a162,165
> 		MOV		AX,SS
> 		CMP		AX,1*8
> 		JNE		.from_app
> ;	OSが動いているときに割り込まれたのでほぼ今までどおり
138c167,168
< 		PUSH	EAX
---
> 		PUSH	SS				; 割り込まれたときのSSを保存
> 		PUSH	EAX				; 割り込まれたときのESPを保存
142a173,190
> 		ADD		ESP,8
> 		POPAD
> 		POP		DS
> 		POP		ES
> 		IRETD
> .from_app:
> ;	アプリが動いているときに割り込まれた
> 		MOV		EAX,1*8
> 		MOV		DS,AX			; とりあえずDSだけOS用にする
> 		MOV		ECX,[0xfe4]		; OSのESP
> 		ADD		ECX,-8
> 		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
> 		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
> 		MOV		SS,AX
> 		MOV		ES,AX
> 		MOV		ESP,ECX
> 		CALL	_inthandler21
> 		POP		ECX
143a192,193
> 		MOV		SS,AX			; SSをアプリ用に戻す
> 		MOV		ESP,ECX			; ESPもアプリ用に戻す
152a203,206
> 		MOV		AX,SS
> 		CMP		AX,1*8
> 		JNE		.from_app
> ;	OSが動いているときに割り込まれたのでほぼ今までどおり
154c208,209
< 		PUSH	EAX
---
> 		PUSH	SS				; 割り込まれたときのSSを保存
> 		PUSH	EAX				; 割り込まれたときのESPを保存
158a214,231
> 		ADD		ESP,8
> 		POPAD
> 		POP		DS
> 		POP		ES
> 		IRETD
> .from_app:
> ;	アプリが動いているときに割り込まれた
> 		MOV		EAX,1*8
> 		MOV		DS,AX			; とりあえずDSだけOS用にする
> 		MOV		ECX,[0xfe4]		; OSのESP
> 		ADD		ECX,-8
> 		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
> 		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
> 		MOV		SS,AX
> 		MOV		ES,AX
> 		MOV		ESP,ECX
> 		CALL	_inthandler27
> 		POP		ECX
159a233,234
> 		MOV		SS,AX			; SSをアプリ用に戻す
> 		MOV		ESP,ECX			; ESPもアプリ用に戻す
168a244,247
> 		MOV		AX,SS
> 		CMP		AX,1*8
> 		JNE		.from_app
> ;	OSが動いているときに割り込まれたのでほぼ今までどおり
170c249,250
< 		PUSH	EAX
---
> 		PUSH	SS				; 割り込まれたときのSSを保存
> 		PUSH	EAX				; 割り込まれたときのESPを保存
174a255,272
> 		ADD		ESP,8
> 		POPAD
> 		POP		DS
> 		POP		ES
> 		IRETD
> .from_app:
> ;	アプリが動いているときに割り込まれた
> 		MOV		EAX,1*8
> 		MOV		DS,AX			; とりあえずDSだけOS用にする
> 		MOV		ECX,[0xfe4]		; OSのESP
> 		ADD		ECX,-8
> 		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
> 		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
> 		MOV		SS,AX
> 		MOV		ES,AX
> 		MOV		ESP,ECX
> 		CALL	_inthandler2c
> 		POP		ECX
175a274,275
> 		MOV		SS,AX			; SSをアプリ用に戻す
> 		MOV		ESP,ECX			; ESPもアプリ用に戻す
185a286,289
> 		MOV		AX,SS
> 		CMP		AX,1*8
> 		JNE		.from_app
> ;	OSが動いているときに割り込まれたのでほぼ今までどおり
187c291,292
< 		PUSH	EAX
---
> 		PUSH	SS				; 割り込まれたときのSSを保存
> 		PUSH	EAX				; 割り込まれたときのESPを保存
192,193c297,320
< 		CMP		EAX,0		; ここだけ違う
< 		JNE		end_app		; ここだけ違う
---
> 		ADD		ESP,8
> 		POPAD
> 		POP		DS
> 		POP		ES
> 		ADD		ESP,4			; INT 0x0d では、これが必要
> 		IRETD
> .from_app:
> ;	アプリが動いているときに割り込まれた
> 		CLI
> 		MOV		EAX,1*8
> 		MOV		DS,AX			; とりあえずDSだけOS用にする
> 		MOV		ECX,[0xfe4]		; OSのESP
> 		ADD		ECX,-8
> 		MOV		[ECX+4],SS		; 割り込まれたときのSSを保存
> 		MOV		[ECX  ],ESP		; 割り込まれたときのESPを保存
> 		MOV		SS,AX
> 		MOV		ES,AX
> 		MOV		ESP,ECX
> 		STI
> 		CALL	_inthandler0d
> 		CLI
> 		CMP		EAX,0
> 		JNE		.kill
> 		POP		ECX
194a322,323
> 		MOV		SS,AX			; SSをアプリ用に戻す
> 		MOV		ESP,ECX			; ESPもアプリ用に戻す
199a329,340
> .kill:
> ;	アプリを異常終了させることにした
> 		MOV		EAX,1*8			; OS用のDS/SS
> 		MOV		ES,AX
> 		MOV		SS,AX
> 		MOV		DS,AX
> 		MOV		FS,AX
> 		MOV		GS,AX
> 		MOV		ESP,[0xfe4]		; start_appのときのESPに無理やり戻す
> 		STI			; 切り替え完了なので割り込み可能に戻す
> 		POPAD	; 保存しておいたレジスタを回復
> 		RET
243c384
< 		STI
---
> 		; 都合のいいことに最初から割り込み禁止になっている
247,250c388,417
< 		PUSHAD		; hrb_apiにわたすためのPUSH
< 		MOV		AX,SS
< 		MOV		DS,AX		; OS用のセグメントをDSとESにも入れる
< 		MOV		ES,AX
---
> 		MOV		EAX,1*8
> 		MOV		DS,AX			; とりあえずDSだけOS用にする
> 		MOV		ECX,[0xfe4]		; OSのESP
> 		ADD		ECX,-40
> 		MOV		[ECX+32],ESP	; アプリのESPを保存
> 		MOV		[ECX+36],SS		; アプリのSSを保存
> 
> ; PUSHADした値をシステムのスタックにコピーする
> 		MOV		EDX,[ESP   ]
> 		MOV		EBX,[ESP+ 4]
> 		MOV		[ECX   ],EDX	; hrb_apiに渡すためコピー
> 		MOV		[ECX+ 4],EBX	; hrb_apiに渡すためコピー
> 		MOV		EDX,[ESP+ 8]
> 		MOV		EBX,[ESP+12]
> 		MOV		[ECX+ 8],EDX	; hrb_apiに渡すためコピー
> 		MOV		[ECX+12],EBX	; hrb_apiに渡すためコピー
> 		MOV		EDX,[ESP+16]
> 		MOV		EBX,[ESP+20]
> 		MOV		[ECX+16],EDX	; hrb_apiに渡すためコピー
> 		MOV		[ECX+20],EBX	; hrb_apiに渡すためコピー
> 		MOV		EDX,[ESP+24]
> 		MOV		EBX,[ESP+28]
> 		MOV		[ECX+24],EDX	; hrb_apiに渡すためコピー
> 		MOV		[ECX+28],EBX	; hrb_apiに渡すためコピー
> 
> 		MOV		ES,AX			; 残りのセグメントレジスタもOS用にする
> 		MOV		SS,AX
> 		MOV		ESP,ECX
> 		STI			; やっと割り込み許可
> 
252,254c419,424
< 		CMP		EAX,0		; EAXが0でなければアプリ終了処理
< 		JNE		end_app
< 		ADD		ESP,32
---
> 
> 		MOV		ECX,[ESP+32]	; アプリのESPを思い出す
> 		MOV		EAX,[ESP+36]	; アプリのSSを思い出す
> 		CLI
> 		MOV		SS,AX
> 		MOV		ESP,ECX
258,263c428
< 		IRETD
< end_app:
< ;	EAXはtss.esp0の番地
< 		MOV		ESP,[EAX]
< 		POPAD
< 		RET					; cmd_appへ帰る
---
> 		IRETD		; この命令が自動でSTIしてくれる
265c430
< _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
---
> _start_app:		; void start_app(int eip, int cs, int esp, int ds);
271,273c436,437
< 		MOV		EBP,[ESP+52]	; tss.esp0の番地
< 		MOV		[EBP  ],ESP		; OS用のESPを保存
< 		MOV		[EBP+4],SS		; OS用のSSを保存
---
> 		MOV		[0xfe4],ESP		; OS用のESP
> 		CLI			; 切り替え中に割り込みが起きてほしくないので禁止
274a439
> 		MOV		SS,BX
278,286c443,461
< ;	以下はRETFでアプリに行かせるためのスタック調整
< 		OR		ECX,3			; アプリ用のセグメント番号に3をORする
< 		OR		EBX,3			; アプリ用のセグメント番号に3をORする
< 		PUSH	EBX				; アプリのSS
< 		PUSH	EDX				; アプリのESP
< 		PUSH	ECX				; アプリのCS
< 		PUSH	EAX				; アプリのEIP
< 		RETF
< ;	アプリが終了してもここには来ない
---
> 		MOV		ESP,EDX
> 		STI			; 切り替え完了なので割り込み可能に戻す
> 		PUSH	ECX				; far-CALLのためにPUSH（cs）
> 		PUSH	EAX				; far-CALLのためにPUSH（eip）
> 		CALL	FAR [ESP]		; アプリを呼び出す
> 
> ;	アプリが終了するとここに帰ってくる
> 
> 		MOV		EAX,1*8			; OS用のDS/SS
> 		CLI			; また切り替えるので割り込み禁止
> 		MOV		ES,AX
> 		MOV		SS,AX
> 		MOV		DS,AX
> 		MOV		FS,AX
> 		MOV		GS,AX
> 		MOV		ESP,[0xfe4]
> 		STI			; 切り替え完了なので割り込み可能に戻す
> 		POPAD	; 保存しておいたレジスタを回復
> 		RET
