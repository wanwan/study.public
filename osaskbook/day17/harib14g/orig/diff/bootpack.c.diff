12,13d11
< #define KEYCMD_LED		0xed
< 
16a15
> 	struct FIFO32 fifo;
19,20c18
< 	struct FIFO32 fifo, keycmd;
< 	int fifobuf[128], keycmd_buf[32];
---
> 	int fifobuf[128];
49c47
< 	int key_to = 0, key_shift = 0, key_leds = (binfo->leds >> 4) & 7, keycmd_wait = -1;
---
> 	int key_to = 0, key_shift = 0, key_leds = (binfo->leds >> 4) & 7;
60d57
< 	fifo32_init(&keycmd, 32, keycmd_buf, 0);
130,133d126
< 	/* 最初にキーボード状態との食い違いがないように、設定しておくことにする */
< 	fifo32_put(&keycmd, KEYCMD_LED);
< 	fifo32_put(&keycmd, key_leds);
< 
135,140d127
< 		if (fifo32_status(&keycmd) > 0 && keycmd_wait < 0) {
< 			/* キーボードコントローラに送るデータがあれば、送る */
< 			keycmd_wait = fifo32_get(&keycmd);
< 			wait_KBC_sendready();
< 			io_out8(PORT_KEYDAT, keycmd_wait);
< 		}
213,234d199
< 				}
< 				if (i == 256 + 0x3a) {	/* CapsLock */
< 					key_leds ^= 4;
< 					fifo32_put(&keycmd, KEYCMD_LED);
< 					fifo32_put(&keycmd, key_leds);
< 				}
< 				if (i == 256 + 0x45) {	/* NumLock */
< 					key_leds ^= 2;
< 					fifo32_put(&keycmd, KEYCMD_LED);
< 					fifo32_put(&keycmd, key_leds);
< 				}
< 				if (i == 256 + 0x46) {	/* ScrollLock */
< 					key_leds ^= 1;
< 					fifo32_put(&keycmd, KEYCMD_LED);
< 					fifo32_put(&keycmd, key_leds);
< 				}
< 				if (i == 256 + 0xfa) {	/* キーボードがデータを無事に受け取った */
< 					keycmd_wait = -1;
< 				}
< 				if (i == 256 + 0xfe) {	/* キーボードがデータを無事に受け取れなかった */
< 					wait_KBC_sendready();
< 					io_out8(PORT_KEYDAT, keycmd_wait);
