10,11c10
< void console_task(struct SHEET *sheet, unsigned int memtotal);
< int cons_newline(int cursor_y, struct SHEET *sheet);
---
> void console_task(struct SHEET *sheet);
87c86
< 	task_cons->tss.esp = memman_alloc_4k(memman, 64 * 1024) + 64 * 1024 - 12;
---
> 	task_cons->tss.esp = memman_alloc_4k(memman, 64 * 1024) + 64 * 1024 - 8;
96d94
< 	*((int *) (task_cons->tss.esp + 8)) = memtotal;
125a124,128
> 	sprintf(s, "(%3d, %3d)", mx, my);
> 	putfonts8_asc_sht(sht_back, 0, 0, COL8_FFFFFF, COL8_008484, s, 10);
> 	sprintf(s, "memory %dMB   free : %dKB",
> 			memtotal / (1024 * 1024), memman_total(memman) / 1024);
> 	putfonts8_asc_sht(sht_back, 0, 32, COL8_FFFFFF, COL8_008484, s, 40);
145a149,150
> 				sprintf(s, "%02X", i - 256);
> 				putfonts8_asc_sht(sht_back, 0, 16, COL8_FFFFFF, COL8_008484, s, 2);
247a253,264
> 					/* データが3バイト揃ったので表示 */
> 					sprintf(s, "[lcr %4d %4d]", mdec.x, mdec.y);
> 					if ((mdec.btn & 0x01) != 0) {
> 						s[1] = 'L';
> 					}
> 					if ((mdec.btn & 0x02) != 0) {
> 						s[3] = 'R';
> 					}
> 					if ((mdec.btn & 0x04) != 0) {
> 						s[2] = 'C';
> 					}
> 					putfonts8_asc_sht(sht_back, 32, 16, COL8_FFFFFF, COL8_008484, s, 15);
262a280,281
> 					sprintf(s, "(%3d, %3d)", mx, my);
> 					putfonts8_asc_sht(sht_back, 0, 0, COL8_FFFFFF, COL8_008484, s, 10);
376c395
< void console_task(struct SHEET *sheet, unsigned int memtotal)
---
> void console_task(struct SHEET *sheet)
381,382c400,401
< 	char s[30], cmdline[30];
< 	struct MEMMAN *memman = (struct MEMMAN *) MEMMAN_ADDR;
---
> 	char s[2];
> 	int x, y;
431c450
< 					/* カーソルをスペースで消してから改行する */
---
> 					/* カーソルをスペースで消す */
433,449c452,466
< 					cmdline[cursor_x / 8 - 2] = 0;
< 					cursor_y = cons_newline(cursor_y, sheet);
< 					/* コマンド実行 */
< 					if (cmdline[0] == 'm' && cmdline[1] == 'e' && cmdline[2] == 'm' && cmdline[3] == 0) {
< 						/* memコマンド */
< 						sprintf(s, "total   %dMB", memtotal / (1024 * 1024));
< 						putfonts8_asc_sht(sheet, 8, cursor_y, COL8_FFFFFF, COL8_000000, s, 30);
< 						cursor_y = cons_newline(cursor_y, sheet);
< 						sprintf(s, "free %dKB", memman_total(memman) / 1024);
< 						putfonts8_asc_sht(sheet, 8, cursor_y, COL8_FFFFFF, COL8_000000, s, 30);
< 						cursor_y = cons_newline(cursor_y, sheet);
< 						cursor_y = cons_newline(cursor_y, sheet);
< 					} else if (cmdline[0] != 0) {
< 						/* コマンドではなく、さらに空行でもない */
< 						putfonts8_asc_sht(sheet, 8, cursor_y, COL8_FFFFFF, COL8_000000, "Bad command.", 12);
< 						cursor_y = cons_newline(cursor_y, sheet);
< 						cursor_y = cons_newline(cursor_y, sheet);
---
> 					if (cursor_y < 28 + 112) {
> 						cursor_y += 16; /* 次の行へ */
> 					} else {
> 						/* スクロール */
> 						for (y = 28; y < 28 + 112; y++) {
> 							for (x = 8; x < 8 + 240; x++) {
> 								sheet->buf[x + y * sheet->bxsize] = sheet->buf[x + (y + 16) * sheet->bxsize];
> 							}
> 						}
> 						for (y = 28 + 112; y < 28 + 128; y++) {
> 							for (x = 8; x < 8 + 240; x++) {
> 								sheet->buf[x + y * sheet->bxsize] = COL8_000000;
> 							}
> 						}
> 						sheet_refresh(sheet, 8, 28, 8 + 240, 28 + 128);
460d476
< 						cmdline[cursor_x / 8 - 2] = i - 256;
473,494d488
< }
< 
< int cons_newline(int cursor_y, struct SHEET *sheet)
< {
< 	int x, y;
< 	if (cursor_y < 28 + 112) {
< 		cursor_y += 16; /* 次の行へ */
< 	} else {
< 		/* スクロール */
< 		for (y = 28; y < 28 + 112; y++) {
< 			for (x = 8; x < 8 + 240; x++) {
< 				sheet->buf[x + y * sheet->bxsize] = sheet->buf[x + (y + 16) * sheet->bxsize];
< 			}
< 		}
< 		for (y = 28 + 112; y < 28 + 128; y++) {
< 			for (x = 8; x < 8 + 240; x++) {
< 				sheet->buf[x + y * sheet->bxsize] = COL8_000000;
< 			}
< 		}
< 		sheet_refresh(sheet, 8, 28, 8 + 240, 28 + 128);
< 	}
< 	return cursor_y;
