21d20
< 	timerctl.using = 0;
23c22
< 		timerctl.timers0[i].flags = 0; /* 未使用 */
---
> 		timerctl.timer[i].flags = 0; /* 未使用 */
32,34c31,33
< 		if (timerctl.timers0[i].flags == 0) {
< 			timerctl.timers0[i].flags = TIMER_FLAGS_ALLOC;
< 			return &timerctl.timers0[i];
---
> 		if (timerctl.timer[i].flags == 0) {
> 			timerctl.timer[i].flags = TIMER_FLAGS_ALLOC;
> 			return &timerctl.timer[i];
55d53
< 	int e, i, j;
58,68c56,58
< 	e = io_load_eflags();
< 	io_cli();
< 	/* どこに入れればいいかを探す */
< 	for (i = 0; i < timerctl.using; i++) {
< 		if (timerctl.timers[i]->timeout >= timer->timeout) {
< 			break;
< 		}
< 	}
< 	/* うしろをずらす */
< 	for (j = timerctl.using; j > i; j--) {
< 		timerctl.timers[j] = timerctl.timers[j - 1];
---
> 	if (timerctl.next > timer->timeout) {
> 		/* 次回の時刻を更新 */
> 		timerctl.next = timer->timeout;
70,74d59
< 	timerctl.using++;
< 	/* あいたすきまに入れる */
< 	timerctl.timers[i] = timer;
< 	timerctl.next = timerctl.timers[0]->timeout;
< 	io_store_eflags(e);
80c65
< 	int i, j;
---
> 	int i;
84c69
< 		return;
---
> 		return; /* まだ次の時刻になってないので、もうおしまい */
86,89c71,83
< 	for (i = 0; i < timerctl.using; i++) {
< 		/* timersのタイマは全て動作中のものなので、flagsを確認しない */
< 		if (timerctl.timers[i]->timeout > timerctl.count) {
< 			break;
---
> 	timerctl.next = 0xffffffff;
> 	for (i = 0; i < MAX_TIMER; i++) {
> 		if (timerctl.timer[i].flags == TIMER_FLAGS_USING) {
> 			if (timerctl.timer[i].timeout <= timerctl.count) {
> 				/* タイムアウト */
> 				timerctl.timer[i].flags = TIMER_FLAGS_ALLOC;
> 				fifo8_put(timerctl.timer[i].fifo, timerctl.timer[i].data);
> 			} else {
> 				/* まだタイムアウトではない */
> 				if (timerctl.next > timerctl.timer[i].timeout) {
> 					timerctl.next = timerctl.timer[i].timeout;
> 				}
> 			}
91,103d84
< 		/* タイムアウト */
< 		timerctl.timers[i]->flags = TIMER_FLAGS_ALLOC;
< 		fifo8_put(timerctl.timers[i]->fifo, timerctl.timers[i]->data);
< 	}
< 	/* ちょうどi個のタイマがタイムアウトした。残りをずらす。 */
< 	timerctl.using -= i;
< 	for (j = 0; j < timerctl.using; j++) {
< 		timerctl.timers[j] = timerctl.timers[i + j];
< 	}
< 	if (timerctl.using > 0) {
< 		timerctl.next = timerctl.timers[0]->timeout;
< 	} else {
< 		timerctl.next = 0xffffffff;
