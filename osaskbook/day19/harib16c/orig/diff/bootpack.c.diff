20,21d19
< void file_readfat(int *fat, unsigned char *img);
< void file_loadfile(int clustno, int size, char *buf, int *fat, char *img);
395d392
< 	int *fat = (int *) memman_alloc_4k(memman, 4 * 2880);
401d397
< 	file_readfat(fat, (unsigned char *) (ADR_DISKIMG + 0x000200));
526,527c522,523
< 							p = (char *) memman_alloc_4k(memman, finfo[x].size);
< 							file_loadfile(finfo[x].clustno, finfo[x].size, p, fat, (char *) (ADR_DISKIMG + 0x003e00));
---
> 							y = finfo[x].size;
> 							p = (char *) (finfo[x].clustno * 512 + 0x003e00 + ADR_DISKIMG);
529c525
< 							for (y = 0; y < finfo[x].size; y++) {
---
> 							for (x = 0; x < y; x++) {
531c527
< 								s[0] = p[y];
---
> 								s[0] = p[x];
559d554
< 							memman_free_4k(memman, (int) p, finfo[x].size);
616,647d610
< }
< 
< void file_readfat(int *fat, unsigned char *img)
< /* ディスクイメージ内のFATの圧縮をとく */
< {
< 	int i, j = 0;
< 	for (i = 0; i < 2880; i += 2) {
< 		fat[i + 0] = (img[j + 0]      | img[j + 1] << 8) & 0xfff;
< 		fat[i + 1] = (img[j + 1] >> 4 | img[j + 2] << 4) & 0xfff;
< 		j += 3;
< 	}
< 	return;
< }
< 
< void file_loadfile(int clustno, int size, char *buf, int *fat, char *img)
< {
< 	int i;
< 	for (;;) {
< 		if (size <= 512) {
< 			for (i = 0; i < size; i++) {
< 				buf[i] = img[clustno * 512 + i];
< 			}
< 			break;
< 		}
< 		for (i = 0; i < 512; i++) {
< 			buf[i] = img[clustno * 512 + i];
< 		}
< 		size -= 512;
< 		buf += 512;
< 		clustno = fat[clustno];
< 	}
< 	return;
