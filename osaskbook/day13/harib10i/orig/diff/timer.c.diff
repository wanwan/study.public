16d15
< 	struct TIMER *t;
20a20,21
> 	timerctl.next = 0xffffffff; /* 最初は作動中のタイマがないので */
> 	timerctl.using = 0;
24,29d24
< 	t = timer_alloc(); /* 一つもらってくる */
< 	t->timeout = 0xffffffff;
< 	t->flags = TIMER_FLAGS_USING;
< 	t->next = 0; /* 一番うしろ */
< 	timerctl.t0 = t; /* 今は番兵しかいないので先頭でもある */
< 	timerctl.next = 0xffffffff; /* 番兵しかいないので番兵の時刻 */
65a61,69
> 	timerctl.using++;
> 	if (timerctl.using == 1) {
> 		/* 動作中のタイマはこれ一つになる場合 */
> 		timerctl.t0 = timer;
> 		timer->next = 0; /* 次はない */
> 		timerctl.next = timer->timeout;
> 		io_store_eflags(e);
> 		return;
> 	}
78a83,85
> 		if (t == 0) {
> 			break; /* 一番うしろになった */
> 		}
86a94,98
> 	/* 一番うしろに入れる場合 */
> 	s->next = timer;
> 	timer->next = 0;
> 	io_store_eflags(e);
> 	return;
90a103
> 	int i;
98c111
< 	for (;;) {
---
> 	for (i = 0; i < timerctl.using; i++) {
107a121,123
> 	timerctl.using -= i;
> 
> 	/* 新しいずらし */
109c125,131
< 	timerctl.next = timer->timeout;
---
> 
> 	/* timerctl.nextの設定 */
> 	if (timerctl.using > 0) {
> 		timerctl.next = timerctl.t0->timeout;
> 	} else {
> 		timerctl.next = 0xffffffff;
> 	}
