10,18d9
< struct TSS32 {
< 	int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;
< 	int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;
< 	int es, cs, ss, ds, fs, gs;
< 	int ldtr, iomap;
< };
< 
< void task_b_main(void);
< 
26c17
< 	int mx, my, i, cursor_x, cursor_c, task_b_esp;
---
> 	int mx, my, i, cursor_x, cursor_c;
41,42d31
< 	struct TSS32 tss_a, tss_b;
< 	struct SEGMENT_DESCRIPTOR *gdt = (struct SEGMENT_DESCRIPTOR *) ADR_GDT;
99,123d87
< 	tss_a.ldtr = 0;
< 	tss_a.iomap = 0x40000000;
< 	tss_b.ldtr = 0;
< 	tss_b.iomap = 0x40000000;
< 	set_segmdesc(gdt + 3, 103, (int) &tss_a, AR_TSS32);
< 	set_segmdesc(gdt + 4, 103, (int) &tss_b, AR_TSS32);
< 	load_tr(3 * 8);
< 	task_b_esp = memman_alloc_4k(memman, 64 * 1024) + 64 * 1024;
< 	tss_b.eip = (int) &task_b_main;
< 	tss_b.eflags = 0x00000202; /* IF = 1; */
< 	tss_b.eax = 0;
< 	tss_b.ecx = 0;
< 	tss_b.edx = 0;
< 	tss_b.ebx = 0;
< 	tss_b.esp = task_b_esp;
< 	tss_b.ebp = 0;
< 	tss_b.esi = 0;
< 	tss_b.edi = 0;
< 	tss_b.es = 1 * 8;
< 	tss_b.cs = 2 * 8;
< 	tss_b.ss = 1 * 8;
< 	tss_b.ds = 1 * 8;
< 	tss_b.fs = 1 * 8;
< 	tss_b.gs = 1 * 8;
< 
190d153
< 				taskswitch4();
279,283d241
< }
< 
< void task_b_main(void)
< {
< 	for (;;) { io_hlt(); }
