8,67d7
< struct TASK *task_now(void)
< {
< 	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
< 	return tl->tasks[tl->now];
< }
< 
< void task_add(struct TASK *task)
< {
< 	struct TASKLEVEL *tl = &taskctl->level[task->level];
< 	tl->tasks[tl->running] = task;
< 	tl->running++;
< 	task->flags = 2; /* 動作中 */
< 	return;
< }
< 
< void task_remove(struct TASK *task)
< {
< 	int i;
< 	struct TASKLEVEL *tl = &taskctl->level[task->level];
< 
< 	/* taskがどこにいるかを探す */
< 	for (i = 0; i < tl->running; i++) {
< 		if (tl->tasks[i] == task) {
< 			/* ここにいた */
< 			break;
< 		}
< 	}
< 
< 	tl->running--;
< 	if (i < tl->now) {
< 		tl->now--; /* ずれるので、これもあわせておく */
< 	}
< 	if (tl->now >= tl->running) {
< 		/* nowがおかしな値になっていたら、修正する */
< 		tl->now = 0;
< 	}
< 	task->flags = 1; /* スリープ中 */
< 
< 	/* ずらし */
< 	for (; i < tl->running; i++) {
< 		tl->tasks[i] = tl->tasks[i + 1];
< 	}
< 
< 	return;
< }
< 
< void task_switchsub(void)
< {
< 	int i;
< 	/* 一番上のレベルを探す */
< 	for (i = 0; i < MAX_TASKLEVELS; i++) {
< 		if (taskctl->level[i].running > 0) {
< 			break; /* 見つかった */
< 		}
< 	}
< 	taskctl->now_lv = i;
< 	taskctl->lv_change = 0;
< 	return;
< }
< 
79,82d18
< 	for (i = 0; i < MAX_TASKLEVELS; i++) {
< 		taskctl->level[i].running = 0;
< 		taskctl->level[i].now = 0;
< 	}
84c20
< 	task->flags = 2;	/* 動作中マーク */
---
> 	task->flags = 2; /* 動作中マーク */
86,88c22,24
< 	task->level = 0;	/* 最高レベル */
< 	task_add(task);
< 	task_switchsub();	/* レベル設定 */
---
> 	taskctl->running = 1;
> 	taskctl->now = 0;
> 	taskctl->tasks[0] = task;
123c59
< void task_run(struct TASK *task, int level, int priority)
---
> void task_run(struct TASK *task, int priority)
125,127d60
< 	if (level < 0) {
< 		level = task->level; /* レベルを変更しない */
< 	}
131,134d63
< 
< 	if (task->flags == 2 && task->level != level) { /* 動作中のレベルの変更 */
< 		task_remove(task); /* これを実行するとflagsは1になるので下のifも実行される */
< 	}
136,138c65,67
< 		/* スリープから起こされる場合 */
< 		task->level = level;
< 		task_add(task);
---
> 		task->flags = 2; /* 動作中マーク */
> 		taskctl->tasks[taskctl->running] = task;
> 		taskctl->running++;
140,141d68
< 
< 	taskctl->lv_change = 1; /* 次回タスクスイッチのときにレベルを見直す */
145c72
< void task_sleep(struct TASK *task)
---
> void task_switch(void)
147,157c74,82
< 	struct TASK *now_task;
< 	if (task->flags == 2) {
< 		/* 動作中だったら */
< 		now_task = task_now();
< 		task_remove(task); /* これを実行するとflagsは1になる */
< 		if (task == now_task) {
< 			/* 自分自身のスリープだったので、タスクスイッチが必要 */
< 			task_switchsub();
< 			now_task = task_now(); /* 設定後での、「現在のタスク」を教えてもらう */
< 			farjmp(0, now_task->sel);
< 		}
---
> 	struct TASK *task;
> 	taskctl->now++;
> 	if (taskctl->now == taskctl->running) {
> 		taskctl->now = 0;
> 	}
> 	task = taskctl->tasks[taskctl->now];
> 	timer_settime(task_timer, task->priority);
> 	if (taskctl->running >= 2) {
> 		farjmp(0, task->sel);
162c87
< void task_switch(void)
---
> void task_sleep(struct TASK *task)
164,177c89,118
< 	struct TASKLEVEL *tl = &taskctl->level[taskctl->now_lv];
< 	struct TASK *new_task, *now_task = tl->tasks[tl->now];
< 	tl->now++;
< 	if (tl->now == tl->running) {
< 		tl->now = 0;
< 	}
< 	if (taskctl->lv_change != 0) {
< 		task_switchsub();
< 		tl = &taskctl->level[taskctl->now_lv];
< 	}
< 	new_task = tl->tasks[tl->now];
< 	timer_settime(task_timer, new_task->priority);
< 	if (new_task != now_task) {
< 		farjmp(0, new_task->sel);
---
> 	int i;
> 	char ts = 0;
> 	if (task->flags == 2) {		/* 指定タスクがもし起きていたら */
> 		if (task == taskctl->tasks[taskctl->now]) {
> 			ts = 1; /* 自分自身を寝かせるので、あとでタスクスイッチする */
> 		}
> 		/* taskがどこにいるかを探す */
> 		for (i = 0; i < taskctl->running; i++) {
> 			if (taskctl->tasks[i] == task) {
> 				/* ここにいた */
> 				break;
> 			}
> 		}
> 		taskctl->running--;
> 		if (i < taskctl->now) {
> 			taskctl->now--; /* ずれるので、これもあわせておく */
> 		}
> 		/* ずらし */
> 		for (; i < taskctl->running; i++) {
> 			taskctl->tasks[i] = taskctl->tasks[i + 1];
> 		}
> 		task->flags = 1; /* 動作していない状態 */
> 		if (ts != 0) {
> 			/* タスクスイッチする */
> 			if (taskctl->now >= taskctl->running) {
> 				/* nowがおかしな値になっていたら、修正する */
> 				taskctl->now = 0;
> 			}
> 			farjmp(0, taskctl->tasks[taskctl->now]->sel);
> 		}
